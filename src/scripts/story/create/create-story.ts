import {outputFileSync, readFileSync} from 'fs-extra'
import path = require('path')
import storyIndexTemplate = require('../../../templates/story/index-template');
import userConfigTemplate from '../../../templates/story/user-config-template'
import configTemplate from '../../../templates/story/config-template'
import variantTemplate from '../../../templates/story/variant-template'
import {replaceComponentName} from '../../../utility/utility'
import {
  replaceArgTypes,
  replaceArgs,
  replaceAttributes,
  replaceDocAttributes,
  replaceSlotContent,
  replaceParameters,
} from '../helpers'

/**
 * Creates story from custom element json file
 * @param {string} json - custom element json generated by web-component-analyzer
 * @param {string} output - where to output the story
 * @param {string} componentName - the name of the component
 * @returns void
 */
export const createStoryFromJson = (json: string, output: string, componentName: string): void => {
  // the namespace of the parent folder of the component src/{namespace}/{componentName}

  const storyIndexOutput = `${path.dirname(output)}/story/generated/index.stories.ts`
  const configOutput =   `${path.dirname(output)}/story/generated/config.ts`
  const userConfigOutput = `${path.dirname(output)}/story/user-config.ts`
  const variantOutput = `${path.dirname(output)}/story/${componentName}.stories.ts`

  // console.log('Creating story for', componentName, 'at', output)
  // console.log(storyIndexOutput)

  // create story index file from template
  outputFileSync(storyIndexOutput, storyIndexTemplate.default)
  // create user-config file from template
  outputFileSync(userConfigOutput, userConfigTemplate)
  // create config file from template
  outputFileSync(configOutput, configTemplate)
  // create variant file from template
  outputFileSync(variantOutput, variantTemplate)

  const outputPaths = [
    storyIndexOutput,
    configOutput,
    userConfigOutput,
    variantOutput,
  ]

  const componentData = JSON.parse(json)
  outputPaths.forEach((output: string) => {
    replaceComponentName(componentName, output)
    replaceArgTypes(componentData, output)
    replaceArgs(componentData, output)
    replaceParameters({}, output)
    replaceDocAttributes(componentData, output)
    replaceAttributes(componentData, output)
    replaceSlotContent(componentData, output)
  })
}

/**
 * Creates story from custom element json file
 * @param {string} args - the cli arguments
 * @param {string} flags - the cli flags
 * @returns void
 */
export const createStory = (args: any, flags: any): void => {
  const currDir = process.cwd()
  const componentName = flags.test ? `${args.name}-test` : args.name

  const configPath = path.resolve(currDir, './.genesis.json')
  const config = JSON.parse(readFileSync(configPath, 'utf8'))
  const directory = flags.defaultDirectory || componentName.split('-')[0]
  const customElementPath = flags.customElementsPath || config.customElementsPath || 'src/custom-elements.json'
  const fullBleed = flags.fullBleed
  const resolvedPath = path.resolve(currDir, customElementPath)
  const base = flags.output ? flags.output : `src/components/${directory}/${componentName}`
  const storyIndexOutput = `${base}/story/generated/index.stories.ts`
  const configOutput =   `${base}/story/generated/config.ts`
  const userConfigOutput = `${base}/story/story-config.ts`
  const variantOutput = `${base}/story/${componentName}.stories.ts`

  // import custom element json file
  import(`${resolvedPath}`)
  .then((customElements: any) => {
    console.log('Creating story for', componentName, 'at', currDir + `/${flags.output || 'src/components'}/${directory}/${componentName}/story`)

    // get custom element json data for component
    const componentData = customElements.tags.find(
      (tag: { name: any }) => tag.name === componentName,
    )

    // create story index file from template
    outputFileSync(storyIndexOutput, storyIndexTemplate.default)
    // create user-config file from template
    outputFileSync(userConfigOutput, userConfigTemplate)
    // create config file from template
    outputFileSync(configOutput, configTemplate)
    // create variant file from template
    outputFileSync(variantOutput, variantTemplate)

    const outputPaths = [
      storyIndexOutput,
      configOutput,
      userConfigOutput,
      variantOutput,
    ]

    outputPaths.forEach((output: string) => {
      replaceComponentName(componentName, output)
      replaceArgTypes(componentData, output)
      replaceArgs(componentData, output)
      replaceParameters({fullBleed}, output)
      replaceDocAttributes(componentData, output)
      replaceAttributes(componentData, output)
      replaceSlotContent(componentData, output)
    })
  })
  .catch(error => {
    console.error(error)
  })
}

